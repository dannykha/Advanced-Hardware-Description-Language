
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module EE427_PA2_Part2(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// SW //////////
	input 		     [9:0]		SW
);


//=======================================================
//  REG/WIRE declarations
//=======================================================

wire clk;
wire resetSW;
reg [31:0] min_1s;
reg [31:0] min_10s;
reg [31:0] sec_1s;
reg [31:0] sec_10s;
reg [31:0] hund_1s;
reg [31:0] hund_10s;
reg [7:0] min_cnt, sec_cnt, hund_cnt;


//=======================================================
//  Structural coding
//=======================================================

clock_divider clock(.i_clock(CLOCK_50), .reset_n(1), .o_clock(clk));

always @(posedge clk) begin
	if (SW[8] == 1'b1) begin
		min_cnt <= {SW[7:4], SW[3:0]};
	end
	if (SW[9] == 1'b0) begin
		hund_cnt <= hund_cnt + 1'b1;
		if (hund_cnt == 100) begin
			sec_cnt <= sec_cnt + 1'b1;
			hund_cnt <= 1'b0;
		end
		if (sec_cnt == 60) begin
			min_cnt <= min_cnt + 1'b1;
			sec_cnt <= 1'b0;
		end
		if (min_cnt >= 60) begin
			min_cnt <= 1'b0;
		end
		min_10s <= min_cnt / 10;
		min_1s <= min_cnt % 10;
		sec_10s <= sec_cnt / 10;
		sec_1s <= sec_cnt % 10;
		hund_10s <= hund_cnt / 10;
		hund_1s <= hund_cnt % 10;
	end
end

Seg7 MinHigh(.v(min_10s), .hex(HEX5));
Seg7 MinLow(.v(min_1s), .hex(HEX4));
Seg7 SecHigh(.v(sec_10s), .hex(HEX3));
Seg7 SecLow(.v(sec_1s), .hex(HEX2));
Seg7 HundHigh(.v(hund_10s), .hex(HEX1));
Seg7 HundLow(.v(hund_1s), .hex(HEX0));

endmodule
