
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module EE427_PA1_Part1(

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire x [3:0];
wire a [3:0];
wire z;

comparator(SW[3], SW[2], SW[1], SW[0], z);
circuitA(SW[3], SW[2], SW[1], SW[0], x[3], x[2], x[1], x[0]);
multiplex(z, SW[3], SW[2], SW[1], SW[0], x[3], x[2], x[1], x[0], a[3], a[2], a[1], a[0]);
Seg7(a[3], a[2], a[1], a[0], HEX0[0], HEX0[1], HEX0[2], HEX0[3], HEX0[4], HEX0[5], HEX0[6]);
Seg1Hex7(z, HEX1[0], HEX1[1], HEX1[2], HEX1[3], HEX1[4], HEX1[5], HEX1[6]);

endmodule

//=======================================================
//  Structural coding
//=======================================================

// module for comparator
module comparator(
	input v3, v2, v1, v0,
	output z); 
	assign z = (v3 & v2) | (v3 & v1);
endmodule

// module for circuit A
module circuitA(
	input v3, v2, v1, v0,
	output a3, a2, a1, a0);
	
	assign a0 = v0;
	assign a1 = (v1 & ~v3) | (~v1 & v3 & v2);
	assign a2 = (~v3 & v2) | (v1 & v2);
	assign a3 = (~v1 & v3 & ~v2);
	
endmodule

// module for multiplexer
// when z = 0 use V3..0 and when z = 1 use x3..0
module multiplex(
	input z, v3, v2, v1, v0, x3, x2, x1, x0,
	output a3, a2, a1, a0);
	
	assign a3 = z ? x3 : v3;
	assign a2 = z ? x2 : v2;
	assign a1 = z ? x1 : v1;
	assign a0 = z ? x0 : v0;
	
endmodule

// module for segment display 0
module Seg7(
	input c, d, a, b,
	output seg0, seg1, seg2, seg3, seg4, seg5, seg6);
	
	assign seg0 = (~a & b & ~c & ~d) | (~a & ~b & ~c & d) | (a & ~b & c & d) | (a & b & c & ~d);
	assign seg1 = (~a & b & ~c & d) | (a & ~b & ~c & d) | (a & b & c & d);
	assign seg2 = (a & ~b & ~c & ~d) | (~a & ~b & c & d);
	assign seg3 = (b & c & ~d) | (~a & b & ~d) | (~a & ~b & ~c & d) | (a & b & ~c & d) | (a & ~b & c & d);
	assign seg4 = b | (a & c & d) | (~a & ~c & d);
	assign seg5 = (b & ~c & ~d) | (a & ~c & ~d) | (a & b & ~c) | (~a & c & d) | (a & b & ~d);
	assign seg6 = (~a & ~c & ~d) | (a & c & ~d) | (a & b & ~c & d);
	
endmodule

// module for segment display 1
module Seg1Hex7(
	input z,
	output seg0, seg1, seg2, seg3, seg4, seg5, seg6);
	
	assign seg0 = z;
	assign seg1 = 0;
	assign seg2 = 0;
	assign seg3 = z;
	assign seg4 = z;
	assign seg5 = z;
	assign seg6 = 1;
	
endmodule



